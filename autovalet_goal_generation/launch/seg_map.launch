<!--
This file launches the gazebo dumpster world with a green colored lane
<?xml version="1.0"?>
as it's ground plane. On top of that launches a node to publish segmentation
map which is to be used by the goal generator

Adapted from parking_lot.launchh

Author  : Subramanian Krishnan (subramak@andrew.cmu.edu)
Date    : 8 Sep 2020

Changelog:
    subbu - 9/08 - Initial commit
-->

<launch>
  <env name="GAZEBO_MODEL_PATH" value="$(find autovalet_gazebo)/models:$(optenv GAZEBO_MODEL_PATH)" />

  <!-- Include autovalet description with simulation true as this is a gazebo launcher -->
  <include file="$(find autovalet_description)/launch/autovalet_description.launch">
    <arg name="simulation" value="true"/>
  </include>

  <arg name="world_file" default="slam_val_dumpster.world"/>

  <!-- Launch CMU parking plane world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find autovalet_gazebo)/worlds/$(arg world_file)"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <!-- Spawn husky in the world -->
  <arg name="x" default="-18"/>
  <arg name="y" default="-9"/>
  <arg name="z" default="0.0"/>
  <arg name="yaw" default="0.0"/>
  <arg name="robot_namespace" default="/"/>

  <node name="spawn_husky_model" pkg="gazebo_ros" type="spawn_model"
        args="-x $(arg x)
              -y $(arg y)
              -z $(arg z)
              -Y $(arg yaw)
              -unpause
              -urdf
              -param robot_description
              -model $(arg robot_namespace)"/>

  <!-- Setup husky's robot state publisher and velocity controller -->
  <rosparam command="load" file="$(find husky_control)/config/control.yaml" />

  <!-- Spawn controller : Reference husky_control package-->
  <node name="base_controller_spawner" pkg="controller_manager" type="spawner" args="husky_joint_publisher husky_velocity_controller"/>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

  <node pkg="twist_mux" type="twist_mux" name="twist_mux">
    <rosparam command="load" file="$(find husky_control)/config/twist_mux.yaml" />
    <remap from="cmd_vel_out" to="husky_velocity_controller/cmd_vel"/>
  </node>

  <!-- Launch joystick/keyboard teleop for husky based on command line argument joystick:=[true/false]
       if you don't specify the command line parameter, joystick param defaults to false -->
  <arg name="joystick" default="false"/>
  <group if="$(arg joystick)">
    <include file="$(find autovalet_husky)/launch/teleop.launch" />
  </group>
  <group unless="$(arg joystick)">
    <node name="teleop" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" output="screen" />
  </group>
  <remap from="cmd_vel" to="husky_velocity_controller/cmd_vel"/>

  <!-- node for combining depth pcl and lidar pcl -->
  <node pkg="autovalet_gazebo" type="concat_pcl" name="concat_pcl" />

  <!-- RVIZ -->
  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find autovalet_gazebo)/config/husky_gazebo_lot.rviz" />

  <!-- Launch the ground truth segmentation map generator -->
  <node pkg="autovalet_goal_generation" type="generate_gt_segmap.py" name="gt_segmap_generator"/>
</launch>
